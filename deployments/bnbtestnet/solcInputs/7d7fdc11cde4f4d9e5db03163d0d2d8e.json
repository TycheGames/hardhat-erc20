{
  "language": "Solidity",
  "sources": {
    "contracts/VersusToken.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.7;\n\nerror Not__Owner();\nerror Address__Zero();\nerror Transfer__Exceed();\nerror Insufficent__Allowance();\nerror DecreaseAllowance__BelowZero();\n\ncontract VersusToken {\n    mapping(address => uint256) private _balance;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    string private _name;\n    string private _symbol;\n    uint8 private constant _decimals = 18;\n\n    //supply no limit\n    uint256 private _totalSupply;\n\n    //contract owner\n    address private immutable _owner;\n\n    //event\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    modifier OnlyOwner() {\n        if (msg.sender != _owner) revert Not__Owner();\n        _;\n    }\n\n    /**\n     *@dev sets the values for initial supply, ownerï¼Œname,symbol\n     */\n    constructor(\n        uint256 initialSupply,\n        string memory name_,\n        string memory symbol_\n    ) {\n        //_totalSupply = initialSupply;\n        _owner = msg.sender;\n        _name = name_;\n        _symbol = symbol_;\n        _mint(_owner, initialSupply);\n    }\n\n    /**\n     *@dev return the token's name\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     *@dev return the token's symbol\n     */\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     *@dev return the tokens decimals\n     */\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     *@dev return total supply tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev return the balance of account\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balance[account];\n    }\n\n    function mint(uint256 amount) public OnlyOwner {\n        _totalSupply += amount;\n        _balance[_owner] += amount;\n        emit Transfer(address(0), _owner, amount);\n    }\n\n    /**\n     *@dev mint tokens\n     */\n    function _mint(address account, uint256 amount) internal OnlyOwner {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply += amount;\n        _balance[account] += amount;\n        emit Transfer(address(0), account, amount);\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     *@dev transfer tokens from sender to 'to'\n     */\n    function transfer(address to, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /**\n     *@dev transfer from\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return (_allowances[owner][spender]);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subedValue) public returns (bool) {\n        address owner = msg.sender;\n        uint256 currentAllowance = allowance(owner, spender);\n        // require(currentAllowance >= subedValue, \"ERC20: decrease allowance below zero!\");\n        if (currentAllowance < subedValue) revert DecreaseAllowance__BelowZero();\n        unchecked {\n            _approve(owner, spender, currentAllowance - subedValue);\n        }\n        return true;\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            // require(currentAllowance >= amount, \"ERC20:insufficent allowance\");\n            if (currentAllowance < amount) revert Insufficent__Allowance();\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        if (owner == address(0) || spender == address(0)) revert Address__Zero();\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        // require(from != address(0), \"ERC20:transfer from zero address \");\n        if (from == address(0) || to == address(0)) revert Address__Zero();\n        //require(to != address(0), \"ERC20:transfer to zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n        uint256 fromBalance = _balance[from];\n        //require(fromBalance >= amount, \"ERC20:transfer amount exceeds balance\");\n        if (fromBalance < amount) revert Transfer__Exceed();\n        unchecked {\n            _balance[from] = fromBalance - amount;\n        }\n        _balance[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}